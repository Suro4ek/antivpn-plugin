// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: antivpn.proto

package antivpn

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AntiVPNClient is the client API for AntiVPN service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AntiVPNClient interface {
	CheckVPN(ctx context.Context, in *CheckVPNRequest, opts ...grpc.CallOption) (*CheckVPNResponse, error)
	AddWhitelist(ctx context.Context, in *CheckVPNRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveWhitelist(ctx context.Context, in *CheckVPNRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddBlackList(ctx context.Context, in *CheckVPNRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveBlackList(ctx context.Context, in *CheckVPNRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type antiVPNClient struct {
	cc grpc.ClientConnInterface
}

func NewAntiVPNClient(cc grpc.ClientConnInterface) AntiVPNClient {
	return &antiVPNClient{cc}
}

func (c *antiVPNClient) CheckVPN(ctx context.Context, in *CheckVPNRequest, opts ...grpc.CallOption) (*CheckVPNResponse, error) {
	out := new(CheckVPNResponse)
	err := c.cc.Invoke(ctx, "/antivpn.AntiVPN/CheckVPN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiVPNClient) AddWhitelist(ctx context.Context, in *CheckVPNRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/antivpn.AntiVPN/AddWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiVPNClient) RemoveWhitelist(ctx context.Context, in *CheckVPNRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/antivpn.AntiVPN/RemoveWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiVPNClient) AddBlackList(ctx context.Context, in *CheckVPNRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/antivpn.AntiVPN/AddBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiVPNClient) RemoveBlackList(ctx context.Context, in *CheckVPNRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/antivpn.AntiVPN/RemoveBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AntiVPNServer is the server API for AntiVPN service.
// All implementations must embed UnimplementedAntiVPNServer
// for forward compatibility
type AntiVPNServer interface {
	CheckVPN(context.Context, *CheckVPNRequest) (*CheckVPNResponse, error)
	AddWhitelist(context.Context, *CheckVPNRequest) (*emptypb.Empty, error)
	RemoveWhitelist(context.Context, *CheckVPNRequest) (*emptypb.Empty, error)
	AddBlackList(context.Context, *CheckVPNRequest) (*emptypb.Empty, error)
	RemoveBlackList(context.Context, *CheckVPNRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAntiVPNServer()
}

// UnimplementedAntiVPNServer must be embedded to have forward compatible implementations.
type UnimplementedAntiVPNServer struct {
}

func (UnimplementedAntiVPNServer) CheckVPN(context.Context, *CheckVPNRequest) (*CheckVPNResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckVPN not implemented")
}
func (UnimplementedAntiVPNServer) AddWhitelist(context.Context, *CheckVPNRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWhitelist not implemented")
}
func (UnimplementedAntiVPNServer) RemoveWhitelist(context.Context, *CheckVPNRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWhitelist not implemented")
}
func (UnimplementedAntiVPNServer) AddBlackList(context.Context, *CheckVPNRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBlackList not implemented")
}
func (UnimplementedAntiVPNServer) RemoveBlackList(context.Context, *CheckVPNRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBlackList not implemented")
}
func (UnimplementedAntiVPNServer) mustEmbedUnimplementedAntiVPNServer() {}

// UnsafeAntiVPNServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AntiVPNServer will
// result in compilation errors.
type UnsafeAntiVPNServer interface {
	mustEmbedUnimplementedAntiVPNServer()
}

func RegisterAntiVPNServer(s grpc.ServiceRegistrar, srv AntiVPNServer) {
	s.RegisterService(&AntiVPN_ServiceDesc, srv)
}

func _AntiVPN_CheckVPN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckVPNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiVPNServer).CheckVPN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antivpn.AntiVPN/CheckVPN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiVPNServer).CheckVPN(ctx, req.(*CheckVPNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiVPN_AddWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckVPNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiVPNServer).AddWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antivpn.AntiVPN/AddWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiVPNServer).AddWhitelist(ctx, req.(*CheckVPNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiVPN_RemoveWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckVPNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiVPNServer).RemoveWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antivpn.AntiVPN/RemoveWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiVPNServer).RemoveWhitelist(ctx, req.(*CheckVPNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiVPN_AddBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckVPNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiVPNServer).AddBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antivpn.AntiVPN/AddBlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiVPNServer).AddBlackList(ctx, req.(*CheckVPNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiVPN_RemoveBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckVPNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiVPNServer).RemoveBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antivpn.AntiVPN/RemoveBlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiVPNServer).RemoveBlackList(ctx, req.(*CheckVPNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AntiVPN_ServiceDesc is the grpc.ServiceDesc for AntiVPN service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AntiVPN_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "antivpn.AntiVPN",
	HandlerType: (*AntiVPNServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckVPN",
			Handler:    _AntiVPN_CheckVPN_Handler,
		},
		{
			MethodName: "AddWhitelist",
			Handler:    _AntiVPN_AddWhitelist_Handler,
		},
		{
			MethodName: "RemoveWhitelist",
			Handler:    _AntiVPN_RemoveWhitelist_Handler,
		},
		{
			MethodName: "AddBlackList",
			Handler:    _AntiVPN_AddBlackList_Handler,
		},
		{
			MethodName: "RemoveBlackList",
			Handler:    _AntiVPN_RemoveBlackList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "antivpn.proto",
}
